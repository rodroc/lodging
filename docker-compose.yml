services:
  db:
    platform: linux/x86_64
    container_name: lodging_postgresql
    image: postgres:alpine3.21
    ports:
      - "5432:5432"
    expose:
      - "5432"
    networks:
      - lodging_network
    environment:
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 3306
      POSTGRES_ROOT_PASSWORD: root_password
      POSTGRES_USER: lodging_user
      POSTGRES_PASSWORD: lodging_password
      POSTGRES_DB: lodging_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-dumps/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lodging_user -d lodging_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    platform: linux/x86_64
    container_name: lodging_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    expose:
      - "3001"
    networks:
      - lodging_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - db
    environment:
      - ENVIRONMENT=DEV
      - NODE_ENV=development
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=lodging_user
      - DB_PASSWORD=lodging_password
      - DB_NAME=lodging_db
      - JWT_SECRET=your_jwt_secret_key
      - API_URL=http://localhost:3001/api
    command: sh -c "echo 'Starting backend...'; sleep 15 && npm run migrate && npm run seed && npm start"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    platform: linux/x86_64
    container_name: lodging_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    expose:
      - "3000"
    networks:
      - lodging_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - ENVIRONMENT=DEV
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001/api
    command: sh -c "echo 'Starting frontend...'; npm run dev -- --host 0.0.0.0 --port 3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  lodging_network:
    driver: bridge